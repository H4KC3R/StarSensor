import fpdf
import csv


def create_pdf(output_params, f, x0, y0, matrix, distortion_file, errors, transition_params, output_folder):
    pdf = fpdf.FPDF('P', 'mm', 'A4')
    pdf.add_font('DejaVu', '', 'fonts/DejaVuSansCondensed.ttf', uni=True)
    pdf.add_font('DejaVu', 'B', 'fonts/DejaVuSansCondensed-Bold.ttf', uni=True)
    pdf.add_page()
    pdf.set_font("DejaVu", 'B', size=15)

    title = "Результаты определения матриц перехода прибора {} зав. №{}".format(output_params[0], output_params[1])
    pdf.multi_cell(200, 10, txt=title, align="C")
    pdf.set_font("DejaVu", size=9)
    pdf.ln(2)
    date = "Дата проведения измерений {}".format(output_params[2])
    operator = "Оператор: {}".format(output_params[3])
    pdf.cell(0, 10, txt=date)
    pdf.cell(0, 10, txt=operator, ln=1, align="R")
    pdf.ln(2)

    pdf.set_font("DejaVu", 'B', size=11)
    pdf.cell(0, 10, txt="Параметы ВСК прибора:", ln=2)
    pdf.ln(2)
    pdf.set_font("DejaVu", size=9)
    pdf.cell(5)
    if distortion_file is None:
        pdf.cell(60, txt="Фокусное расстояние (f):")
        pdf.cell(90, txt="Координаты главной точки (X0, Y0):")
        pdf.cell(50, txt="Дисторсия(D):")
        pdf.ln(5)

        pdf.cell(10)
        pdf.cell(65, txt="f = {}mm".format(str(f)))
        pdf.cell(20, txt="X0 = {}".format(str(x0)))
        pdf.cell(65, txt="Y0 = {}".format(str(y0)))
        pdf.cell(50, txt="D = 0")
        pdf.ln(2)
    else:
        with open(distortion_file, "r") as read_file:
            data = csv.reader(read_file, delimiter=' ')
            pdf.ln(3)
            pdf.set_font('DejaVu', '', 9)
            pdf.cell(45, txt="Фокусное расстояние (f):")
            pdf.cell(65, txt="f = {}mm".format(str(f)))
            pdf.cell(50, txt="Дисторсия(D):")
            pdf.ln(5)
            pdf.cell(60, txt="Координаты главной точки (X0, Y0):")
            pdf.cell(15, txt="X0 = {}".format(str(x0)))
            pdf.cell(20, txt="Y0 = {}".format(str(x0)))
            pdf.cell(5)
            pdf.set_font('Times', '', 9)
            th = pdf.font_size
            pdf.ln(1)
            for row in data:
                pdf.cell(120)
                for datum in row:
                    datum = round(float(datum), 8)
                    pdf.cell(20, th, str(datum), border=1)
                pdf.ln(th)
    pdf.set_font("DejaVu", 'B', size=11)
    pdf.cell(0, 10, txt="Матрица перехода ВСК-ПСК стенда:", ln=1)
    pdf.ln(3)
    pdf.set_font('DejaVu', '', 10)
    pdf.cell(30, txt="Мвск_пск = ")
    pdf.set_font('DejaVu', '', 9)
    pdf.cell(30, txt="{}".format(str(round(matrix[0][0], 8))))
    pdf.cell(30, txt="{}".format(str(round(matrix[0][1], 8))))
    pdf.cell(30, txt="{}".format(str(round(matrix[0][2], 8))))
    pdf.ln(5)
    pdf.cell(20)
    pdf.set_font('DejaVu', '', 50)
    pdf.cell(5,  txt="[")
    pdf.set_font('DejaVu', '', 9)
    pdf.cell(5)
    pdf.cell(30, txt="{}".format(str(round(matrix[1][0], 8))))
    pdf.cell(30, txt="{}".format(str(round(matrix[1][1], 8))))
    pdf.cell(20, txt="{}".format(str(round(matrix[1][2], 8))))
    pdf.set_font('DejaVu', '', 50)
    pdf.cell(5,  txt="]")
    pdf.ln(5)
    pdf.set_font('DejaVu', '', 9)
    pdf.cell(30)
    pdf.cell(30, txt="{}".format(str(round(matrix[2][0], 8))))
    pdf.cell(30, txt="{}".format(str(round(matrix[2][1], 8))))
    pdf.cell(25, txt="{}".format(str(round(matrix[2][2], 8))))

    pdf.ln(10)
    pdf.set_font("DejaVu", 'B', size=11)
    pdf.cell(0, 10, txt="Параметры уравнивания стенда:", ln=1)
    pdf.ln(1)
    pdf.cell(5)
    pdf.set_font("DejaVu", '', size=9)
    pdf.cell(30, txt="points={}".format(errors[0]))
    pdf.cell(30, txt="max(Res)={} µm".format(errors[1]))
    pdf.cell(10)
    pdf.cell(30, txt="stdev(Res)={} µm".format(errors[2]))
    pdf.cell(15)
    pdf.cell(30, txt="mean(Res)={} µm".format(errors[3]))
    pdf.ln(2)
    pdf.set_font("DejaVu", 'B', size=11)
    pdf.cell(0, 10, txt="Параметры перехода стенда:", ln=1)
    pdf.ln(2)
    pdf.set_font("DejaVu", '', size=9)
    th = pdf.font_size
    pdf.cell(30, th+1, "", border=1)
    pdf.cell(30, th+1, "DEGREE", border=1)
    pdf.cell(30, th+1, "MINUTES", border=1)
    pdf.cell(30, th+1, "SECONDS", border=1)
    pdf.ln(th+1)
    for row in transition_params:
        for elem in row:
            pdf.cell(30, th+1, str(elem), border=1)
        pdf.ln(th+1)
    pdf.ln(5)
    pdf.cell(30)
    pdf.image("{}/points and degrees.png".format(output_folder), w=120, h=60)
    pdf.ln(2 + (3 if distortion_file is None else 0))
    pdf.cell(30)
    pdf.image("{}/residuals.png".format(output_folder), w=120, h=40)
    pdf.line(20, 278, 50, 278)
    pdf.cell(40)
    pdf.line(150, 278, 180, 278)
    pdf.cell(110)
    pdf.output("{}/результат {}.pdf".format(output_folder, output_params[0]))
